/-
Copyright (c) 2024 Wanyi He. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author: Wanyi He, Chenyi Li
-/
import Mathlib.Topology.MetricSpace.Basic
import Mathlib.Topology.Basic
import Mathlib.Order.Filter.Extr
import Mathlib.Analysis.Calculus.Gradient.Basic
import Mathlib.Analysis.Calculus.LineDeriv.Basic
import Function.Convex_Function

/-!
# Subgradient of convex functions

The file defines subgradient for convex functions in E and proves some basic properties.

Let `f : E ‚Üí ‚Ñù` be a convex function on `s` and `g : E`, where `s` is a set of `E`.
`g` is a subgradient of `f` at `x` if for any `y ‚àà s`, we have `f y ‚â• f x + inner g (y - x)`.
The insight comes from the first order condition of convex function.

## Main declarations

* `HasSubgradientAt f g x`: The function `f` has subgradient `g` at `x`.
* `HasSubgradientWithinAt f g s x`: The function `f` has subgradient `g` at `x` within `s`.
* `SubderivAt f x`: The subderiv of `f` at `x` is the collection of all possible
  subgradients of `f` at `x`.
* `SubderivWithinAt f s x`: The subderiv of `f` at `x` within `s` is
  the collection of all possible subgradients of `f` at `x` within `s`.

## Main results

* `SubderivWithinAt_eq_gradient`: The subderiv of differentiable convex functions
  is the singleton of its gradient.
* `HasSubgradientAt_zero_iff_isMinOn`: `0` is a subgradient of `f` at `x` if and
  only if `x` is a minimizer of `f`.
-/

open Filter Topology Set InnerProductSpace


noncomputable section

variable {E : Type*} [NormedAddCommGroup E] [InnerProductSpace ‚Ñù E] [CompleteSpace E]

variable {f : E ‚Üí ‚Ñù} {g : E} {x : E} {s : Set E}

set_option quotPrecheck false

local notation gradient "‚àá*" => (toDualMap ‚Ñù _) gradient

local notation "‚ü™" x ", " y "‚ü´" => @inner ‚Ñù _ _ x y

/-- Subgradient of functions --/
def HasSubgradientAt (f : E ‚Üí ‚Ñù) (g x : E) : Prop :=
  ‚àÄ y, f y ‚â• f x + ‚ü™g, y - x‚ü´

def HasSubgradientWithinAt (f : E ‚Üí ‚Ñù) (g : E) (s : Set E) (x : E) : Prop :=
  ‚àÄ y ‚àà s, f y ‚â• f x + ‚ü™g, y - x‚ü´

/-- Subderiv of functions --/
def SubderivAt (f : E ‚Üí ‚Ñù) (x : E) : Set E :=
  {g : E| HasSubgradientAt f g x}

def SubderivWithinAt (f : E ‚Üí ‚Ñù) (s : Set E) (x : E) : Set E :=
  {g : E| HasSubgradientWithinAt f g s x}

@[simp]
theorem mem_SubderivAt : HasSubgradientAt f g x ‚Üî g ‚àà SubderivAt f x := ‚ü®id, id‚ü©

@[simp]
theorem hasSubgradientWithinAt_univ :
    HasSubgradientWithinAt f g univ x ‚Üî HasSubgradientAt f g x :=
  ‚ü®fun h y => h y trivial, fun h y _ => h y‚ü©

theorem HasSubgradientAt.hasSubgradientWithinAt :
    HasSubgradientAt f g x ‚Üí HasSubgradientWithinAt f g s x := fun h y _ => h y

/-! ### Basic properties about `Subderiv` -/

section Basic_properties

variable (hf : ConvexOn ‚Ñù s f)

open Bornology

/-- The subderiv of `f` at `x` is a closed set. --/
theorem SubderivAt.isClosed : ‚àÄ x, IsClosed (SubderivAt f x) := by
  intro x
  by_cases e : SubderivAt f x = ‚àÖ
  ¬∑ apply Eq.subst (Eq.symm e) isClosed_empty
  rw [‚Üê isSeqClosed_iff_isClosed]
  intro g g' hg cg y
  obtain cg' := Tendsto.const_add (f x) (Filter.Tendsto.inner cg tendsto_const_nhds)
  apply le_of_tendsto_of_tendsto' cg' tendsto_const_nhds (fun n => hg n y)

theorem SubderivWithinAt.isClosed : ‚àÄ x, IsClosed (SubderivWithinAt f s x) := by
  intro x
  by_cases e : SubderivWithinAt f s x = ‚àÖ
  ¬∑ apply Eq.subst (Eq.symm e) isClosed_empty
  rw [‚Üê isSeqClosed_iff_isClosed]
  intro g g' hg cg y ys
  obtain cg' := Tendsto.const_add (f x) (Filter.Tendsto.inner cg tendsto_const_nhds)
  apply le_of_tendsto_of_tendsto' cg' tendsto_const_nhds (fun n => hg n y ys)

/-- The subderiv of `f` at `x` is a convex set. --/
theorem SubderivAt.convex : ‚àÄ x, Convex ‚Ñù (SubderivAt f x) := by
  intro x
  by_cases e : SubderivAt f x = ‚àÖ
  ¬∑ apply Eq.subst (Eq.symm e) convex_empty
  intro g‚ÇÅ h1 g‚ÇÇ h2 a b lea leb abeq y
  have ineq1 : a ‚Ä¢ f y ‚â• a ‚Ä¢ f x + a ‚Ä¢ ‚ü™g‚ÇÅ, y - x‚ü´ := by
    rw [‚Üê smul_add]
    apply smul_le_smul_of_nonneg (h1 y) lea
  have ineq2 : b ‚Ä¢ f y ‚â• b ‚Ä¢ f x + b ‚Ä¢ inner g‚ÇÇ (y - x) := by
    rw [‚Üê smul_add]
    apply smul_le_smul_of_nonneg (h2 y) leb
  have eq : (a ‚Ä¢ f x + a ‚Ä¢ inner g‚ÇÅ (y - x)) + (b ‚Ä¢ f x + b ‚Ä¢ inner g‚ÇÇ (y - x))
      = f x + inner (a ‚Ä¢ g‚ÇÅ + b ‚Ä¢ g‚ÇÇ) (y - x) := by
    rw [add_add_add_comm, ‚Üê Eq.symm (Convex.combo_self abeq (f x))]
    apply congrArg (HAdd.hAdd (f x))
    rw [inner_add_left, inner_smul_left, inner_smul_left]; rfl
  rw [Eq.symm (Convex.combo_self abeq (f y)), ‚Üê eq]
  apply add_le_add ineq1 ineq2

theorem SubderivWithinAt.convex : ‚àÄ x ‚àà s, Convex ‚Ñù (SubderivWithinAt f s x) := by
  intro x _
  by_cases e : SubderivWithinAt f s x = ‚àÖ
  ¬∑ apply Eq.subst (Eq.symm e) convex_empty
  intro g‚ÇÅ h1 g‚ÇÇ h2 a b lea leb abeq y ys
  have ineq1 : a ‚Ä¢ f y ‚â• a ‚Ä¢ f x + a ‚Ä¢ ‚ü™g‚ÇÅ, y - x‚ü´ := by
    rw [‚Üê smul_add]
    apply smul_le_smul_of_nonneg (h1 y ys) lea
  have ineq2 : b ‚Ä¢ f y ‚â• b ‚Ä¢ f x + b ‚Ä¢ inner g‚ÇÇ (y - x) := by
    rw [‚Üê smul_add]
    apply smul_le_smul_of_nonneg (h2 y ys) leb
  have eq : (a ‚Ä¢ f x + a ‚Ä¢ inner g‚ÇÅ (y - x)) + (b ‚Ä¢ f x + b ‚Ä¢ inner g‚ÇÇ (y - x))
      = f x + inner (a ‚Ä¢ g‚ÇÅ + b ‚Ä¢ g‚ÇÇ) (y - x) := by
    rw [add_add_add_comm, ‚Üê Eq.symm (Convex.combo_self abeq (f x))]
    apply congrArg (HAdd.hAdd (f x))
    rw [inner_add_left, inner_smul_left, inner_smul_left]; rfl
  rw [Eq.symm (Convex.combo_self abeq (f y)), ‚Üê eq]
  apply add_le_add ineq1 ineq2

/-- Monotonicity of subderiv--/
theorem subgradientAt_mono {u v : E} {f : E ‚Üí ‚Ñù}
    (hu : u ‚àà SubderivAt f x) (hv : v ‚àà SubderivAt f y) : ‚ü™u - v, x - y‚ü´ ‚â• (0 : ‚Ñù):= by
  specialize hu y; specialize hv x
  have ineq1 : ‚ü™u, x - y‚ü´ ‚â• f x - f y := by
    rw [congrArg (inner u) (Eq.symm (neg_sub y x)), inner_neg_right]; linarith
  have ineq2 : inner v (x - y) ‚â§ f x - f y := Iff.mpr le_sub_iff_add_le' hv
  rw [inner_sub_left]; linarith

end Basic_properties

/-! ### Calculation of `Subderiv` -/

section calculation

open Pointwise

/-- Subderiv of differentiable convex functions --/
theorem SubderivWithinAt_eq_gradient {f' : E ‚Üí E} (hx : x ‚àà interior s)
    (hf : ConvexOn ‚Ñù s f) (h : HasGradientAt f (f' x) x) :
    SubderivWithinAt f s x = {f' x} := by
  obtain h' := hasGradientAt_iff_hasFDerivAt.mp h
  let g := f' x
  rw [Set.eq_singleton_iff_nonempty_unique_mem]
  constructor
  ¬∑ use g; intro y ys
    apply first_order_condition' h hf (interior_subset hx) y ys
  intro g' hg'; by_contra neq
  apply not_le_of_lt (norm_sub_pos_iff.mpr neq)
  let v := g' - g; obtain vneq := sub_ne_zero.mpr neq
  have : Tendsto (fun (t : ‚Ñù) => (f (x + t ‚Ä¢ v) - f x - ‚ü™g, t ‚Ä¢ v‚ü´) * ‚Äñt ‚Ä¢ v‚Äñ‚Åª¬π)
      (ùìù[>] 0) (ùìù 0) := by
    rw [Metric.tendsto_nhdsWithin_nhds]; intro Œµ Œµpos
    unfold HasFDerivAt at h'
    rw [hasFDerivAtFilter_iff_tendsto, Metric.tendsto_nhds_nhds] at h'
    obtain ‚ü®Œ¥, Œ¥pos, hŒ¥‚ü© := h' Œµ Œµpos
    use (Œ¥ * ‚Äñv‚Äñ‚Åª¬π)
    obtain pos := mul_pos Œ¥pos (inv_pos.mpr (norm_pos_iff.mpr vneq))
    constructor
    ¬∑ exact pos
    intro t _ ht; rw [dist_eq_norm] at ht; rw [dist_eq_norm]
    have : dist (x + t ‚Ä¢ v) x < Œ¥ := by
      rw [dist_eq_norm, add_sub_cancel', norm_smul, ‚Üê (sub_zero t)]
      apply lt_of_lt_of_eq ((mul_lt_mul_right (norm_sub_pos_iff.mpr neq)).mpr ht)
      rw [mul_assoc, inv_mul_cancel (norm_ne_zero_iff.mpr vneq), mul_one]
    specialize hŒ¥ this; rw [dist_eq_norm] at hŒ¥
    have eq1 : ‚Äñ‚Äñx + t ‚Ä¢ v - x‚Äñ‚Åª¬π‚Äñ = ‚Äñt ‚Ä¢ v‚Äñ‚Åª¬π := by
      rw [add_sub_cancel', norm_inv, norm_norm]
    have eq2 : (g ‚àá*) (x + t ‚Ä¢ v - x) = ‚ü™g, t ‚Ä¢ v‚ü´ := by rw [add_sub_cancel']; exact rfl
    have eq3 : ‚Äñ(f (x + t ‚Ä¢ v) - f x - ‚ü™g, t ‚Ä¢ v‚ü´) * ‚Äñt ‚Ä¢ v‚Äñ‚Åª¬π - 0‚Äñ =
      ‚Äñf (x + t ‚Ä¢ v) - f x - ‚ü™g, t ‚Ä¢ v‚ü´‚Äñ * ‚Äñt ‚Ä¢ v‚Äñ‚Åª¬π := by
        rw [sub_zero, norm_mul, norm_inv, norm_norm]
    have eq : ‚Äñ‚Äñx + t ‚Ä¢ v - x‚Äñ‚Åª¬π * ‚Äñf (x + t ‚Ä¢ v) - f x - (g ‚àá*) (x + t ‚Ä¢ v - x)‚Äñ - 0‚Äñ =
      ‚Äñ(f (x + t ‚Ä¢ v) - f x - ‚ü™g, t ‚Ä¢ v‚ü´) * ‚Äñt ‚Ä¢ v‚Äñ‚Åª¬π - 0‚Äñ := by
        rw [sub_zero, norm_mul, norm_norm, mul_comm, eq1, eq2, ‚Üê eq3]
    apply Eq.trans_lt (Eq.symm eq) hŒ¥
  apply ge_of_tendsto this
  rw [Filter.Eventually, Metric.mem_nhdsWithin_iff]
  rw [mem_interior_iff_mem_nhds, Metric.mem_nhds_iff] at hx
  obtain ‚ü®Œµ, Œµpos, ballmem‚ü© := hx
  obtain pos := mul_pos Œµpos (inv_pos.mpr (norm_pos_iff.mpr vneq))
  use (Œµ * ‚Äñv‚Äñ‚Åª¬π); use pos; intro t ht
  have tball := ht.1; have tlt : t > 0 := ht.2
  have tvpos : ‚Äñt ‚Ä¢ v‚Äñ‚Åª¬π > 0 := by
    apply inv_pos.mpr; rw [norm_smul]
    apply smul_pos (abs_pos_of_pos tlt) (norm_sub_pos_iff.mpr neq)
  have mems : x + t ‚Ä¢ v ‚àà s := by
    apply ballmem
    rw [mem_ball_iff_norm, sub_zero] at tball
    rw [mem_ball_iff_norm, add_sub_cancel', norm_smul]
    have : ‚Äñt‚Äñ * ‚Äñv‚Äñ < Œµ * ‚Äñv‚Äñ‚Åª¬π * ‚Äñv‚Äñ := by
      apply (mul_lt_mul_right (norm_sub_pos_iff.mpr neq)).mpr tball
    rwa [mul_assoc, inv_mul_cancel (norm_ne_zero_iff.mpr vneq), mul_one] at this
  obtain ineq1 := hg' (x + t ‚Ä¢ v); rw [add_sub_cancel'] at ineq1
  have eq1 : ‚Äñv‚Äñ = (‚ü™g', t ‚Ä¢ v‚ü´ - ‚ü™g, t ‚Ä¢ v‚ü´) * ‚Äñt ‚Ä¢ v‚Äñ‚Åª¬π := by
    have eq2 : ‚Äñv‚Äñ = ‚ü™v, v‚ü´ * ‚Äñv‚Äñ‚Åª¬π := by
      rw [real_inner_self_eq_norm_sq]
      apply (div_eq_iff _).mp
      ¬∑ rw [div_inv_eq_mul, pow_two]
      exact inv_ne_zero (norm_ne_zero_iff.mpr vneq)
    have eq3 : ‚ü™v, v‚ü´ * ‚Äñv‚Äñ‚Åª¬π = ‚ü™v, t ‚Ä¢ v‚ü´ * ‚Äñt ‚Ä¢ v‚Äñ‚Åª¬π := by
      have : ‚ü™v, t ‚Ä¢ v‚ü´ = ‚ü™v, v‚ü´ * t := by rw [inner_smul_right, mul_comm]
      rw [this, mul_assoc]
      have : ‚Äñv‚Äñ‚Åª¬π = t * ‚Äñt ‚Ä¢ v‚Äñ‚Åª¬π := by
        have :  t * ‚Äñt ‚Ä¢ v‚Äñ‚Åª¬π = t / ‚Äñt ‚Ä¢ v‚Äñ := rfl
        rw [this, inv_eq_one_div]
        have : t = ‚Äñt‚Äñ := by
          have : ‚Äñt‚Äñ = |t| := rfl
          rw [this, abs_of_pos tlt]
        rw [this, norm_smul, norm_norm, div_mul_eq_div_div, div_self]
        rw [norm_ne_zero_iff]
        exact ne_of_gt tlt
      rw [this]
    rw [eq2, eq3, mul_eq_mul_right_iff];
    left; rw [inner_sub_left]
  rw [mem_setOf, eq1, mul_le_mul_right tvpos]
  apply sub_le_sub_right (le_sub_iff_add_le'.mpr (ineq1 mems))

/-- Alternarive version for FDeriv --/
theorem SubderivWithinAt_eq_FDeriv {f' : E ‚Üí (E ‚ÜíL[‚Ñù] ‚Ñù)} (hx : x ‚àà interior s)
    (hf : ConvexOn ‚Ñù s f) (h : HasFDerivAt f (f' x) x) :
    SubderivWithinAt f s x = {(toDual ‚Ñù E).symm (f' x)} := by
  have h‚ÇÅ : HasFDerivAt f ((toDual ‚Ñù E) ((LinearIsometryEquiv.symm (toDual ‚Ñù E)) (f' x))) x := by
      simp [h]
  obtain h' := hasGradientAt_iff_hasFDerivAt.mpr h‚ÇÅ
  apply SubderivWithinAt_eq_gradient hx hf
  exact h'

/-- Subderivatives of the sum of two functions is a subset of the sum of the
subderivatives of the two functions --/
theorem SubderivAt.add_subset {f‚ÇÅ f‚ÇÇ : E ‚Üí ‚Ñù} :
    ‚àÄ (x : E), SubderivAt f‚ÇÅ x + SubderivAt f‚ÇÇ x ‚äÜ SubderivAt (f‚ÇÅ + f‚ÇÇ) x := by
  intro x y hy y'
  obtain ‚ü®y‚ÇÅ, y‚ÇÇ, hy‚ÇÅ, hy‚ÇÇ, eq‚ü© := Set.mem_add.mpr hy
  have eq' : y‚ÇÅ + y‚ÇÇ = y := eq
  have : (f‚ÇÅ + f‚ÇÇ) y' ‚â• (f‚ÇÅ x + ‚ü™y‚ÇÅ, y' - x‚ü´) + (f‚ÇÇ x + ‚ü™y‚ÇÇ, y' - x‚ü´) :=
    add_le_add (hy‚ÇÅ y') (hy‚ÇÇ y')
  rwa [add_add_add_comm, ‚Üê inner_add_left, eq'] at this
  
end calculation

/-! ### Optimality Theory for Unconstrained Nondifferentiable Problems -/

section

theorem HasSubgradientAt_zero_of_isMinOn (h : IsMinOn f univ x) : HasSubgradientAt f 0 x :=
  fun y => le_of_le_of_eq' (h trivial) (by rw [inner_zero_left, add_zero])

theorem isMinOn_of_HasSubgradentAt_zero (h : HasSubgradientAt f 0 x) : IsMinOn f univ x := by
  intro y _; specialize h y
  rwa [inner_zero_left, add_zero] at h

/-- `x'` minimize `f` if and only if `0` is a subgradient of `f` at `x'` --/
theorem HasSubgradientAt_zero_iff_isMinOn :
    HasSubgradientAt f 0 x ‚Üî IsMinOn f univ x :=
  ‚ü®isMinOn_of_HasSubgradentAt_zero, HasSubgradientAt_zero_of_isMinOn‚ü©

theorem HasSubgradientWithinAt_zero_of_isMinOn (h : IsMinOn f s x) :
    HasSubgradientWithinAt f 0 s x :=
  fun y ys => le_of_le_of_eq' (h ys) (by rw [inner_zero_left, add_zero])

theorem isMinOn_of_HasSubgradentWithinAt_zero (h : HasSubgradientWithinAt f 0 s x) :
    IsMinOn f s x := by
  intro y ys; specialize h y ys
  rwa [inner_zero_left, add_zero] at h

theorem HasSubgradientWithinAt_zero_iff_isMinOn :
    HasSubgradientWithinAt f 0 s x ‚Üî IsMinOn f s x :=
  ‚ü®isMinOn_of_HasSubgradentWithinAt_zero, HasSubgradientWithinAt_zero_of_isMinOn‚ü©

end
